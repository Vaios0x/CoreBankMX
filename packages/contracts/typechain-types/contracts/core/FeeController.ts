/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FeeControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "ROLE_ADMIN"
      | "ROLE_KEEPER"
      | "ROLE_ORACLE"
      | "ROLE_PAUSER"
      | "ROLE_RISK"
      | "exchangeFeeBps"
      | "feeCollector"
      | "getBorrowFee"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isPro"
      | "minBorrowAmount"
      | "originationFeeBps"
      | "proDiscountBps"
      | "renounceRole"
      | "revokeRole"
      | "setCollector"
      | "setFees"
      | "setMinBorrow"
      | "setPro"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetPro"
      | "UpdateCollector"
      | "UpdateFees"
      | "UpdateMinBorrow"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ORACLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_PAUSER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROLE_RISK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isPro", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "minBorrowAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "originationFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proDiscountBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPro",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_KEEPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ORACLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_PAUSER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_RISK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPro", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minBorrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "originationFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proDiscountBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPro", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetProEvent {
  export type InputTuple = [user: AddressLike, pro: boolean];
  export type OutputTuple = [user: string, pro: boolean];
  export interface OutputObject {
    user: string;
    pro: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateCollectorEvent {
  export type InputTuple = [collector: AddressLike];
  export type OutputTuple = [collector: string];
  export interface OutputObject {
    collector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateFeesEvent {
  export type InputTuple = [
    originationFeeBps: BigNumberish,
    exchangeFeeBps: BigNumberish,
    proDiscountBps: BigNumberish
  ];
  export type OutputTuple = [
    originationFeeBps: bigint,
    exchangeFeeBps: bigint,
    proDiscountBps: bigint
  ];
  export interface OutputObject {
    originationFeeBps: bigint;
    exchangeFeeBps: bigint;
    proDiscountBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMinBorrowEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeController extends BaseContract {
  connect(runner?: ContractRunner | null): FeeController;
  waitForDeployment(): Promise<this>;

  interface: FeeControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ROLE_ADMIN: TypedContractMethod<[], [string], "view">;

  ROLE_KEEPER: TypedContractMethod<[], [string], "view">;

  ROLE_ORACLE: TypedContractMethod<[], [string], "view">;

  ROLE_PAUSER: TypedContractMethod<[], [string], "view">;

  ROLE_RISK: TypedContractMethod<[], [string], "view">;

  exchangeFeeBps: TypedContractMethod<[], [bigint], "view">;

  feeCollector: TypedContractMethod<[], [string], "view">;

  getBorrowFee: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [[bigint, string] & { fee: bigint; collector: string }],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isPro: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  minBorrowAmount: TypedContractMethod<[], [bigint], "view">;

  originationFeeBps: TypedContractMethod<[], [bigint], "view">;

  proDiscountBps: TypedContractMethod<[], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setCollector: TypedContractMethod<
    [_collector: AddressLike],
    [void],
    "nonpayable"
  >;

  setFees: TypedContractMethod<
    [
      _originationFeeBps: BigNumberish,
      _exchangeFeeBps: BigNumberish,
      _proDiscountBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setMinBorrow: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPro: TypedContractMethod<
    [user: AddressLike, pro: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_KEEPER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_ORACLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_PAUSER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_RISK"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "exchangeFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBorrowFee"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [[bigint, string] & { fee: bigint; collector: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPro"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "minBorrowAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "originationFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proDiscountBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCollector"
  ): TypedContractMethod<[_collector: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<
    [
      _originationFeeBps: BigNumberish,
      _exchangeFeeBps: BigNumberish,
      _proDiscountBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinBorrow"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPro"
  ): TypedContractMethod<
    [user: AddressLike, pro: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetPro"
  ): TypedContractEvent<
    SetProEvent.InputTuple,
    SetProEvent.OutputTuple,
    SetProEvent.OutputObject
  >;
  getEvent(
    key: "UpdateCollector"
  ): TypedContractEvent<
    UpdateCollectorEvent.InputTuple,
    UpdateCollectorEvent.OutputTuple,
    UpdateCollectorEvent.OutputObject
  >;
  getEvent(
    key: "UpdateFees"
  ): TypedContractEvent<
    UpdateFeesEvent.InputTuple,
    UpdateFeesEvent.OutputTuple,
    UpdateFeesEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMinBorrow"
  ): TypedContractEvent<
    UpdateMinBorrowEvent.InputTuple,
    UpdateMinBorrowEvent.OutputTuple,
    UpdateMinBorrowEvent.OutputObject
  >;

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetPro(address,bool)": TypedContractEvent<
      SetProEvent.InputTuple,
      SetProEvent.OutputTuple,
      SetProEvent.OutputObject
    >;
    SetPro: TypedContractEvent<
      SetProEvent.InputTuple,
      SetProEvent.OutputTuple,
      SetProEvent.OutputObject
    >;

    "UpdateCollector(address)": TypedContractEvent<
      UpdateCollectorEvent.InputTuple,
      UpdateCollectorEvent.OutputTuple,
      UpdateCollectorEvent.OutputObject
    >;
    UpdateCollector: TypedContractEvent<
      UpdateCollectorEvent.InputTuple,
      UpdateCollectorEvent.OutputTuple,
      UpdateCollectorEvent.OutputObject
    >;

    "UpdateFees(uint256,uint256,uint256)": TypedContractEvent<
      UpdateFeesEvent.InputTuple,
      UpdateFeesEvent.OutputTuple,
      UpdateFeesEvent.OutputObject
    >;
    UpdateFees: TypedContractEvent<
      UpdateFeesEvent.InputTuple,
      UpdateFeesEvent.OutputTuple,
      UpdateFeesEvent.OutputObject
    >;

    "UpdateMinBorrow(uint256)": TypedContractEvent<
      UpdateMinBorrowEvent.InputTuple,
      UpdateMinBorrowEvent.OutputTuple,
      UpdateMinBorrowEvent.OutputObject
    >;
    UpdateMinBorrow: TypedContractEvent<
      UpdateMinBorrowEvent.InputTuple,
      UpdateMinBorrowEvent.OutputTuple,
      UpdateMinBorrowEvent.OutputObject
    >;
  };
}
