/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ILoanManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "borrow"
      | "debtOf"
      | "getAccountData"
      | "repay"
      | "repayFrom"
      | "simulateHealthAfter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Borrow" | "Repay" | "UpdateParams"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "debtOf", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getAccountData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "repayFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateHealthAfter",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debtOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "simulateHealthAfter",
    data: BytesLike
  ): Result;
}

export namespace BorrowEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, fee: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateParamsEvent {
  export type InputTuple = [
    targetLtv: BigNumberish,
    liquidationLtv: BigNumberish,
    baseRate: BigNumberish
  ];
  export type OutputTuple = [
    targetLtv: bigint,
    liquidationLtv: bigint,
    baseRate: bigint
  ];
  export interface OutputObject {
    targetLtv: bigint;
    liquidationLtv: bigint;
    baseRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILoanManager extends BaseContract {
  connect(runner?: ContractRunner | null): ILoanManager;
  waitForDeployment(): Promise<this>;

  interface: ILoanManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  borrow: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  debtOf: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getAccountData: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collateral: bigint;
        debt: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;

  repay: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  repayFrom: TypedContractMethod<
    [payer: AddressLike, user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  simulateHealthAfter: TypedContractMethod<
    [user: AddressLike, newCollateral: BigNumberish],
    [[bigint, bigint] & { healthFactor: bigint; ltvBps: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "debtOf"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAccountData"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collateral: bigint;
        debt: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayFrom"
  ): TypedContractMethod<
    [payer: AddressLike, user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "simulateHealthAfter"
  ): TypedContractMethod<
    [user: AddressLike, newCollateral: BigNumberish],
    [[bigint, bigint] & { healthFactor: bigint; ltvBps: bigint }],
    "view"
  >;

  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "Repay"
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "UpdateParams"
  ): TypedContractEvent<
    UpdateParamsEvent.InputTuple,
    UpdateParamsEvent.OutputTuple,
    UpdateParamsEvent.OutputObject
  >;

  filters: {
    "Borrow(address,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "Repay(address,uint256)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "UpdateParams(uint256,uint256,uint256)": TypedContractEvent<
      UpdateParamsEvent.InputTuple,
      UpdateParamsEvent.OutputTuple,
      UpdateParamsEvent.OutputObject
    >;
    UpdateParams: TypedContractEvent<
      UpdateParamsEvent.InputTuple,
      UpdateParamsEvent.OutputTuple,
      UpdateParamsEvent.OutputObject
    >;
  };
}
