/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LoanManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "ROLE_ADMIN"
      | "ROLE_KEEPER"
      | "ROLE_ORACLE"
      | "ROLE_PAUSER"
      | "ROLE_RISK"
      | "accrueInterest"
      | "baseRateBps"
      | "borrow"
      | "collateralToken"
      | "collateralVault"
      | "debtAsset"
      | "debtOf"
      | "feeCollector"
      | "feeController"
      | "getAccountData"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "interestIndex"
      | "lastAccrual"
      | "liquidationLtv"
      | "oracle"
      | "paused"
      | "principalDebt"
      | "renounceRole"
      | "repay"
      | "repayFrom"
      | "revokeRole"
      | "setFeeController"
      | "setOracle"
      | "setParams"
      | "simulateHealthAfter"
      | "supportsInterface"
      | "targetLtv"
      | "userIndex"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccrueInterest"
      | "Borrow"
      | "Paused"
      | "Repay"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetFeeController"
      | "Unpaused"
      | "UpdateParams"
      | "UpdateRates"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ORACLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_PAUSER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROLE_RISK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseRateBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtAsset", values?: undefined): string;
  encodeFunctionData(functionFragment: "debtOf", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interestIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastAccrual",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationLtv",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "principalDebt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "repayFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeController",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateHealthAfter",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "targetLtv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userIndex",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_KEEPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ORACLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_PAUSER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_RISK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseRateBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debtOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAccrual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationLtv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "principalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "simulateHealthAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "targetLtv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userIndex", data: BytesLike): Result;
}

export namespace AccrueInterestEvent {
  export type InputTuple = [newIndex: BigNumberish, dt: BigNumberish];
  export type OutputTuple = [newIndex: bigint, dt: bigint];
  export interface OutputObject {
    newIndex: bigint;
    dt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, fee: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeControllerEvent {
  export type InputTuple = [controller: AddressLike];
  export type OutputTuple = [controller: string];
  export interface OutputObject {
    controller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateParamsEvent {
  export type InputTuple = [
    targetLtv: BigNumberish,
    liquidationLtv: BigNumberish,
    baseRate: BigNumberish
  ];
  export type OutputTuple = [
    targetLtv: bigint,
    liquidationLtv: bigint,
    baseRate: bigint
  ];
  export interface OutputObject {
    targetLtv: bigint;
    liquidationLtv: bigint;
    baseRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateRatesEvent {
  export type InputTuple = [baseRateBps: BigNumberish];
  export type OutputTuple = [baseRateBps: bigint];
  export interface OutputObject {
    baseRateBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LoanManager extends BaseContract {
  connect(runner?: ContractRunner | null): LoanManager;
  waitForDeployment(): Promise<this>;

  interface: LoanManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ROLE_ADMIN: TypedContractMethod<[], [string], "view">;

  ROLE_KEEPER: TypedContractMethod<[], [string], "view">;

  ROLE_ORACLE: TypedContractMethod<[], [string], "view">;

  ROLE_PAUSER: TypedContractMethod<[], [string], "view">;

  ROLE_RISK: TypedContractMethod<[], [string], "view">;

  accrueInterest: TypedContractMethod<[], [void], "nonpayable">;

  baseRateBps: TypedContractMethod<[], [bigint], "view">;

  borrow: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  collateralToken: TypedContractMethod<[], [string], "view">;

  collateralVault: TypedContractMethod<[], [string], "view">;

  debtAsset: TypedContractMethod<[], [string], "view">;

  debtOf: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  feeCollector: TypedContractMethod<[], [string], "view">;

  feeController: TypedContractMethod<[], [string], "view">;

  getAccountData: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collateral: bigint;
        _debt: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  interestIndex: TypedContractMethod<[], [bigint], "view">;

  lastAccrual: TypedContractMethod<[], [bigint], "view">;

  liquidationLtv: TypedContractMethod<[], [bigint], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  principalDebt: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  repay: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  repayFrom: TypedContractMethod<
    [payer: AddressLike, user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeController: TypedContractMethod<
    [controller: AddressLike, collector: AddressLike],
    [void],
    "nonpayable"
  >;

  setOracle: TypedContractMethod<
    [_oracle: AddressLike, _collateralToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setParams: TypedContractMethod<
    [_target: BigNumberish, _liq: BigNumberish, _baseRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  simulateHealthAfter: TypedContractMethod<
    [user: AddressLike, newCollateral: BigNumberish],
    [[bigint, bigint] & { healthFactor: bigint; ltvBps: bigint }],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  targetLtv: TypedContractMethod<[], [bigint], "view">;

  userIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_ADMIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_KEEPER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_ORACLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_PAUSER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_RISK"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accrueInterest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "baseRateBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collateralToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collateralVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "debtAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "debtOf"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAccountData"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collateral: bigint;
        _debt: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "interestIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastAccrual"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidationLtv"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "principalDebt"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayFrom"
  ): TypedContractMethod<
    [payer: AddressLike, user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeController"
  ): TypedContractMethod<
    [controller: AddressLike, collector: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<
    [_oracle: AddressLike, _collateralToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setParams"
  ): TypedContractMethod<
    [_target: BigNumberish, _liq: BigNumberish, _baseRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "simulateHealthAfter"
  ): TypedContractMethod<
    [user: AddressLike, newCollateral: BigNumberish],
    [[bigint, bigint] & { healthFactor: bigint; ltvBps: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "targetLtv"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "AccrueInterest"
  ): TypedContractEvent<
    AccrueInterestEvent.InputTuple,
    AccrueInterestEvent.OutputTuple,
    AccrueInterestEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Repay"
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeController"
  ): TypedContractEvent<
    SetFeeControllerEvent.InputTuple,
    SetFeeControllerEvent.OutputTuple,
    SetFeeControllerEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateParams"
  ): TypedContractEvent<
    UpdateParamsEvent.InputTuple,
    UpdateParamsEvent.OutputTuple,
    UpdateParamsEvent.OutputObject
  >;
  getEvent(
    key: "UpdateRates"
  ): TypedContractEvent<
    UpdateRatesEvent.InputTuple,
    UpdateRatesEvent.OutputTuple,
    UpdateRatesEvent.OutputObject
  >;

  filters: {
    "AccrueInterest(uint256,uint256)": TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;
    AccrueInterest: TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;

    "Borrow(address,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Repay(address,uint256)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetFeeController(address)": TypedContractEvent<
      SetFeeControllerEvent.InputTuple,
      SetFeeControllerEvent.OutputTuple,
      SetFeeControllerEvent.OutputObject
    >;
    SetFeeController: TypedContractEvent<
      SetFeeControllerEvent.InputTuple,
      SetFeeControllerEvent.OutputTuple,
      SetFeeControllerEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UpdateParams(uint256,uint256,uint256)": TypedContractEvent<
      UpdateParamsEvent.InputTuple,
      UpdateParamsEvent.OutputTuple,
      UpdateParamsEvent.OutputObject
    >;
    UpdateParams: TypedContractEvent<
      UpdateParamsEvent.InputTuple,
      UpdateParamsEvent.OutputTuple,
      UpdateParamsEvent.OutputObject
    >;

    "UpdateRates(uint256)": TypedContractEvent<
      UpdateRatesEvent.InputTuple,
      UpdateRatesEvent.OutputTuple,
      UpdateRatesEvent.OutputObject
    >;
    UpdateRates: TypedContractEvent<
      UpdateRatesEvent.InputTuple,
      UpdateRatesEvent.OutputTuple,
      UpdateRatesEvent.OutputObject
    >;
  };
}
